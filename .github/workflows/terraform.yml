name: terraform-Pangolin

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
  TF_BACKEND_TABLE:  ${{ vars.TF_BACKEND_TABLE }}
  TF_BACKEND_KEY:    ${{ vars.TF_BACKEND_KEY }}

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket
        run: |
          set -euo pipefail
          BUCKET="${TF_BACKEND_BUCKET}"
          REGION="${AWS_REGION}"
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET"
            else
              aws s3api create-bucket --bucket "$BUCKET" --create-bucket-configuration LocationConstraint="$REGION"
            fi
          fi
          aws s3api put-public-access-block --bucket "$BUCKET" --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket "$BUCKET" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'

      - name: Ensure DynamoDB table
        run: |
          TABLE="${TF_BACKEND_TABLE}"
          if ! aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            aws dynamodb create-table --table-name "$TABLE" --billing-mode PAY_PER_REQUEST --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH
            aws dynamodb wait table-exists --table-name "$TABLE"
          fi

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Generate backend.hcl
        run: |
          cat > backend.hcl <<'HCL'
          bucket         = "${{ env.TF_BACKEND_BUCKET }}"
          key            = "${{ env.TF_BACKEND_KEY }}"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "${{ env.TF_BACKEND_TABLE }}"
          encrypt        = true
          HCL

      - run: terraform init -backend-config=backend.hcl
      - run: terraform fmt -check
      - run: terraform validate
      - run: terraform plan -input=false -no-color -out=tfplan

      - name: Notify Discord
        if: always()
        uses: sarisia/actions-status-discord@v1.15.4
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: Terraform Plan
          username: GitHub Actions

  apply:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - name: Generate backend.hcl
        run: |
          cat > backend.hcl <<'HCL'
          bucket         = "${{ env.TF_BACKEND_BUCKET }}"
          key            = "${{ env.TF_BACKEND_KEY }}"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "${{ env.TF_BACKEND_TABLE }}"
          encrypt        = true
          HCL
      - run: terraform init -backend-config=backend.hcl
      - run: terraform apply -input=false -auto-approve

      - name: Notify Discord
        if: always()
        uses: sarisia/actions-status-discord@v1.15.4
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: Terraform Apply
          username: GitHub Actions
